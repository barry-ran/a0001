<module>
<baseinfo>
name=织梦安全助手
team=织梦58
time=2018-03-03
email=88888888@qq.com
url=https://www.dede58.com
hash=edcda9b0914571e46b3d519502acddc4
indexname=
indexurl=
ismember=0
autosetup=1
autodel=1
lang=utf-8
moduletype=plus
</baseinfo>
<systemfile>
<menustring>

</menustring>
<readme>
PHAgc3R5bGU9J2xpbmUtaGVpZ2h0OjE1MCUnPjxwIHN0eWxlPSdsaW5lLWhlaWdodDoxNTAlJz48cCBzdHlsZT0nbGluZS1oZWlnaHQ6MTUwJSc+PHAgc3R5bGU9J2xpbmUtaGVpZ2h0OjE1MCUnPjxwIHN0eWxlPSdsaW5lLWhlaWdodDoxNTAlJz48cCBzdHlsZT0nbGluZS1oZWlnaHQ6MTUwJSc+5b6u5L+h5a6J5YWo5Yqp5omLPC9wPjwvcD48L3A+PGJyIC8+PGJyIC8+PGJyIC8+DQo8L3A+PGJyIC8+PGJyIC8+DQo8cD48YSBocmVmPSdodHRwOi8vd3d3LmRlZGU1OC5jb20vJz7or6bmg4Xlj4Lop4E8L2E+PC9wPjwvcD48L3A+
</readme>
<setupsql40>
RGVsZXRlIEZyb20gYCNAX19wbHVzYCB3aGVyZSBwbHVzbmFtZSBsaWtlICfnu4fmoqblronlhajliqnmiYsnOw0KSU5TRVJUIElOVE8gYCNAX19wbHVzYCAoYHBsdXNuYW1lYCwgYG1lbnVzdHJpbmdgLCBgbWFpbnVybGAsIGB3cml0ZXJgLCBgaXNzaG93YCwgYGZpbGVsaXN0YCkgVkFMVUVTICgn57uH5qKm5a6J5YWo5Yqp5omLJywgJzxtOml0ZW0gbmFtZT0nJ+e7h+aipuWuieWFqOWKqeaJiycnIGxpbms9JydkZWRlc2FmZS5waHAnJyByYW5rPScncGx1c19zdGFyZ2V0PScnbWFpbicnIC8+JywgJycsICfnu4fmoqY1OCcsIDEsICdkZWRlc2FmZS5waHAnKTs=
</setupsql40>
<delsql>
RGVsZXRlIEZyb20gYCNAX19wbHVzYCB3aGVyZSBwbHVzbmFtZSBsaWtlICfnu4fmoqblronlhajliqnmiYsnOw==
</delsql>
<setup>

</setup>
<uninstall>

</uninstall>
<oldfilelist>
dedesafe.php
dedesafe_rename.php
../plus/dedesafe.php
</oldfilelist>
</systemfile>

<modulefiles>
<file type='file' name='dedesafe.php'>

</file>
<file type='file' name='dedesafe_rename.php'>
PD9waHANCmhlYWRlcigiQ29udGVudC10eXBlOnRleHQvaHRtbDsgQ2hhcnNldD11dGYtOCIpOw0KZGVmaW5lKCdERURFUEFUSCcsIHN0cl9yZXBsYWNlKCJcXCIsICcvJywgZGlybmFtZShfX0ZJTEVfXykgKSApOw0KDQppZigkX0dFVFsnbmFtZSddPT0nZGF0YScpew0KICAgIGNoZWNrV3JpdGUoKTsNCg0KICAgICRuZXduYW1lID0gJ2RhdGFfJy51bmlxaWQoKTsNCiAgICAkcmVzdWx0ID0gcmVuYW1lKCcuLi9kYXRhJywnLi4vJy4kbmV3bmFtZSk7DQogICAgaWYoJHJlc3VsdCl7DQogICAgICAgICRjb250ZW50ID0gcmVhZEZpbGVDb250ZW50KERFREVQQVRILicvLi4vaW5jbHVkZS9jb21tb24uaW5jLnBocCcpOw0KICAgICAgICAkY29udGVudCA9IHN0cl9yZXBsYWNlKCJERURFUk9PVC4nL2RhdGEnIiwiREVERVJPT1QuJy97JG5ld25hbWV9JyIsJGNvbnRlbnQpOw0KICAgICAgICB3cml0ZUZpbGVDb250ZW50KERFREVQQVRILicvLi4vaW5jbHVkZS9jb21tb24uaW5jLnBocCcsJGNvbnRlbnQpOw0KICAgICAgICAkY29udGVudCA9IHJlYWRGaWxlQ29udGVudChERURFUEFUSC4nLy4uL2luZGV4LnBocCcpOw0KICAgICAgICBpZigkY29udGVudCl7DQogICAgICAgICAgICAkY29udGVudCA9IHN0cl9yZXBsYWNlKCIvZGF0YS8iLCIveyRuZXduYW1lfS8iLCRjb250ZW50KTsNCiAgICAgICAgICAgIHdyaXRlRmlsZUNvbnRlbnQoREVERVBBVEguJy8uLi9pbmRleC5waHAnLCRjb250ZW50KTsNCiAgICAgICAgfQ0KICAgICAgICAkY29udGVudCA9IHJlYWRGaWxlQ29udGVudChERURFUEFUSC4nLy4uL20vaW5kZXgucGhwJyk7DQogICAgICAgIGlmKCRjb250ZW50KSB7DQogICAgICAgICAgICAkY29udGVudCA9IHN0cl9yZXBsYWNlKCIvZGF0YS8iLCIveyRuZXduYW1lfS8iLCRjb250ZW50KTsNCiAgICAgICAgICAgIHdyaXRlRmlsZUNvbnRlbnQoREVERVBBVEguJy8uLi9tL2luZGV4LnBocCcsJGNvbnRlbnQpOw0KICAgICAgICB9DQogICAgICAgICRjb250ZW50ID0gcmVhZEZpbGVDb250ZW50KERFREVQQVRILicvLi4vaW5jbHVkZS9hcmMucnNzdmlldy5jbGFzcy5waHAnKTsNCiAgICAgICAgaWYoJGNvbnRlbnQpIHsNCiAgICAgICAgICAgICRjb250ZW50ID0gc3RyX3JlcGxhY2UoIi9kYXRhLyIsIi97JG5ld25hbWV9LyIsJGNvbnRlbnQpOw0KICAgICAgICAgICAgd3JpdGVGaWxlQ29udGVudChERURFUEFUSC4nLy4uL2luY2x1ZGUvYXJjLnJzc3ZpZXcuY2xhc3MucGhwJywkY29udGVudCk7DQogICAgICAgIH0NCiAgICAgICAgJGNvbnRlbnQgPSByZWFkRmlsZUNvbnRlbnQoREVERVBBVEguJy9tYWtlaHRtbF9qc19hY3Rpb24ucGhwJyk7DQogICAgICAgIGlmKCRjb250ZW50KSB7DQogICAgICAgICAgICAkY29udGVudCA9IHN0cl9yZXBsYWNlKCIvZGF0YS8iLCIveyRuZXduYW1lfS8iLCRjb250ZW50KTsNCiAgICAgICAgICAgIHdyaXRlRmlsZUNvbnRlbnQoREVERVBBVEguJy9tYWtlaHRtbF9qc19hY3Rpb24ucGhwJywkY29udGVudCk7DQogICAgICAgIH0NCiAgICAgICAgcmVxdWlyZV9vbmNlKERFREVQQVRILiIvLi4vaW5jbHVkZS9jb21tb24uaW5jLnBocCIpOw0KICAgICAgICBlZGl0VHBsQ2FjaGUoJG5ld25hbWUpOw0KICAgICAgICBlY2hvICfkv67mlLlkYXRh5ZCN5oiQ5Yqf77yBJztleGl0KCk7DQogICAgfQ0KICAgIGVjaG8gJ+S/ruaUuWRhdGHlkI3lpLHotKXvvIEnOw0KfWVsc2V7DQogICAgaWYoISRfR0VUWyduZXduYW1lJ10pew0KICAgICAgICBlY2hvICfmnKrmjIflrprmlrDnmoTlkI3np7DvvIEnO2V4aXQoKTsNCiAgICB9DQogICAgJG5ld25hbWUgPSAkX0dFVFsnbmV3bmFtZSddOw0KICAgICRyZXN1bHQgPSByZW5hbWUoJy4uL2RlZGUnLCcuLi8nLiRuZXduYW1lKTsNCiAgICBpZigkcmVzdWx0KXsNCiAgICAgICAgZWNobyAnPGgyPuS/ruaUuWRlZGXlkI3miJDlip/vvIHor7fniaLorrDmlrDlkI7lj7DlnLDlnYDvvJo8YSBocmVmPSJodHRwOi8vJy4kX1NFUlZFUlsnSFRUUF9IT1NUJ10uJy8nLiRuZXduYW1lLiciPmh0dHA6Ly8nLiRfU0VSVkVSWydIVFRQX0hPU1QnXS4nLycuJG5ld25hbWUuJzwvYT48L2gyPic7ZXhpdCgpOw0KICAgIH0NCiAgICBlY2hvICfkv67mlLlkZWRl5ZCN5aSx6LSl77yBJzsNCn0NCg0KDQpmdW5jdGlvbiBlZGl0VHBsQ2FjaGUoJG5ld25hbWUpDQp7DQogICAgZ2xvYmFsICRkc3FsOw0KICAgICRkc3FsLT5FeGVjdXRlTm9uZVF1ZXJ5KCJ1cGRhdGUgYCNAX19zeXNjb25maWdgIHNldCBgdmFsdWVgID0gJy97JG5ld25hbWV9L3RwbGNhY2hlJyB3aGVyZSB2YXJuYW1lID0gJ2NmZ190cGxjYWNoZV9kaXInIik7DQogICAgUmVXcml0ZUNvbmZpZygpOw0KfQ0KZnVuY3Rpb24gcmVhZEZpbGVDb250ZW50KCRmaWxlUGF0aCkNCnsNCiAgICAkdHh0ID0gJGZpbGVQYXRoOw0KICAgIGlmKCFmaWxlX2V4aXN0cygkdHh0KSkNCiAgICB7DQogICAgICAgICRmcCA9IGZvcGVuKCR0eHQsJ3cnKTsNCiAgICB9ZWxzZSB7DQogICAgICAgICRmcCA9IGZvcGVuKCR0eHQsICdyJyk7DQogICAgfQ0KICAgICRjb250ZW50ID0gZnJlYWQoJGZwLCBmaWxlc2l6ZSgkdHh0KSk7DQogICAgZmNsb3NlKCRmcCk7DQogICAgcmV0dXJuICRjb250ZW50Ow0KfQ0KZnVuY3Rpb24gd3JpdGVGaWxlQ29udGVudCgkZmlsZVBhdGgsJGNvbnRlbnQpDQp7DQogICAgaWYoIWlzX3dyaXRlYWJsZSgkZmlsZVBhdGgpKQ0KICAgIHsNCiAgICAgICAgZWNobyAi5paH5Lu2eyRmaWxlUGF0aH3kuI3mlK/mjIHlhpnlhaXvvIzml6Dms5Xkv67mlLnvvIEiOw0KICAgICAgICBleGl0KCk7DQogICAgfQ0KICAgICR0eHQgPSAkZmlsZVBhdGg7DQogICAgJGZwID0gZm9wZW4oJHR4dCwndycpOw0KICAgIGZ3cml0ZSgkZnAsJGNvbnRlbnQpOw0KICAgIGZjbG9zZSgkZnApOw0KICAgIHJldHVybiB0cnVlOw0KfQ0KZnVuY3Rpb24gY2hlY2tXcml0ZSgpDQp7DQogICAgaWYoIWlzX3dyaXRlYWJsZShERURFUEFUSC4nLy4uL2luY2x1ZGUvY29tbW9uLmluYy5waHAnKSkNCiAgICB7DQogICAgICAgIGVjaG8gIi9pbmNsdWRlL2NvbW1vbi5pbmMucGhwJ+S4jeaUr+aMgeWGmeWFpe+8jOaXoOazlemHjeWRveWQje+8gSI7DQogICAgICAgIGV4aXQoKTsNCiAgICB9DQp9DQpmdW5jdGlvbiBSZVdyaXRlQ29uZmlnKCkNCnsNCiAgICByZXF1aXJlX29uY2UoREVERVBBVEguIi8uLi9pbmNsdWRlL2NvbW1vbi5pbmMucGhwIik7DQogICAgZ2xvYmFsICRkc3FsOw0KICAgICRjb25maWdmaWxlID0gREVERURBVEEuJy9jb25maWcuY2FjaGUuaW5jLnBocCc7DQogICAgaWYoIWlzX3dyaXRlYWJsZSgkY29uZmlnZmlsZSkpDQogICAgew0KICAgICAgICBlY2hvICLphY3nva7mlofku7YneyRjb25maWdmaWxlfSfkuI3mlK/mjIHlhpnlhaXvvIzml6Dms5Xkv67mlLnns7vnu5/phY3nva7lj4LmlbDvvIEiOw0KICAgICAgICBleGl0KCk7DQogICAgfQ0KICAgICRmcCA9IGZvcGVuKCRjb25maWdmaWxlLCd3Jyk7DQogICAgZmxvY2soJGZwLDMpOw0KICAgIGZ3cml0ZSgkZnAsIjwiLiI/cGhwXHJcbiIpOw0KICAgICRkc3FsLT5TZXRRdWVyeSgiU0VMRUNUIGB2YXJuYW1lYCxgdHlwZWAsYHZhbHVlYCxgZ3JvdXBpZGAgRlJPTSBgI0BfX3N5c2NvbmZpZ2AgT1JERVIgQlkgYWlkIEFTQyAiKTsNCiAgICAkZHNxbC0+RXhlY3V0ZSgpOw0KICAgIHdoaWxlKCRyb3cgPSAkZHNxbC0+R2V0QXJyYXkoKSkNCiAgICB7DQogICAgICAgIGlmKCRyb3dbJ3R5cGUnXT09J251bWJlcicpDQogICAgICAgIHsNCiAgICAgICAgICAgIGlmKCRyb3dbJ3ZhbHVlJ109PScnKSAkcm93Wyd2YWx1ZSddID0gMDsNCiAgICAgICAgICAgIGZ3cml0ZSgkZnAsIlwkeyRyb3dbJ3Zhcm5hbWUnXX0gPSAiLiRyb3dbJ3ZhbHVlJ10uIjtcclxuIik7DQogICAgICAgIH0NCiAgICAgICAgZWxzZQ0KICAgICAgICB7DQogICAgICAgICAgICBmd3JpdGUoJGZwLCJcJHskcm93Wyd2YXJuYW1lJ119ID0gJyIuc3RyX3JlcGxhY2UoIiciLCcnLCRyb3dbJ3ZhbHVlJ10pLiInO1xyXG4iKTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICBmd3JpdGUoJGZwLCI/Ii4iPiIpOw0KICAgIGZjbG9zZSgkZnApOw0KfQ0K
</file>
<file type='file' name='../plus/dedesafe.php'>

</file>
</modulefiles>
</module>
